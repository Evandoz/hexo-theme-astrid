<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Astrid</title>
  
  <subtitle>Demo of Hexo Theme Astrid</subtitle>
  <link href="/hexo-theme-astrid//atom.xml" rel="self"/>
  
  <link href="https://evandoz.github.io/hexo-theme-astrid/"/>
  <updated>2018-10-29T01:20:22.058Z</updated>
  <id>https://evandoz.github.io/hexo-theme-astrid/</id>
  
  <author>
    <name>Levan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 Archlinux 中使用 Secure Boot</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2018/Archlinux_Secure_Boot/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2018/Archlinux_Secure_Boot/</id>
    <published>2018-06-30T06:34:10.000Z</published>
    <updated>2018-10-29T01:20:22.058Z</updated>
    
    <content type="html"><![CDATA[<p>在预装了 Winodws 10 的笔记本上装上了 Archlinux (GPT + UEFI)，然后由于其不支持 Secure Boot，不得已关掉了该选项，但这并不是我想要的，经过一番摸索，终于解决问题。</p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Secure Boot 是 UEFI (Unified Extensible Firmware Interface) 的一个 feature，用于应对 <code>boot sector viruses</code>，这种病毒在开机时执行，难于防范。 Secure Boot 主要原理是使用加密签名，开机时固件会检查其执行的 UEFI 程序是否有加密签名，若签名与 NVRAM 中保存的签名不一致或是被列入 NVRAM 黑名单，那么该 UEFI 程序将被禁止运行，操作系统没有获得计算机控制权自然就无法启动，理论上就阻止了病毒的传播。</p><p>关于 Secure Boot 尤其是 for Linux 的更多介绍，可参见 <a href="http://www.rodsbooks.com/efi-bootloaders/secureboot.html" rel="external nofollow noopener noreferrer" target="_blank">Managing EFI Boot Loaders for Linux: Dealing with Secure Boot</a>，也正是在该文的引导下解决了 Archlinux 中的 Secure Boot 问题。</p><h2 id="Shim-amp-PreLoader"><a href="#Shim-amp-PreLoader" class="headerlink" title="Shim &amp; PreLoader"></a>Shim &amp; PreLoader</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.rodsbooks.com/efi-bootloaders/secureboot.html" rel="external nofollow noopener noreferrer" target="_blank">Managing EFI Boot Loaders for Linux: Dealing with Secure Boot</a><br><a href="https://wiki.archlinux.org/index.php/Secure_Boot" rel="external nofollow noopener noreferrer" target="_blank">Secure Boot in Arch Linux</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在预装了 Winodws 10 的笔记本上装上了 Archlinux (GPT + UEFI)，然后由于其不支持 Secure Boot，不得已关掉了该选项，但这并不是我想要的，经过一番摸索，终于解决问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/Linux/"/>
    
    
      <category term="Archlinux" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/Archlinux/"/>
    
      <category term="Secure Boot" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/Secure-Boot/"/>
    
  </entry>
  
  <entry>
    <title>配合非负 margin 实现元素的绝对居中</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2018/Element_Absolute_Center_with_Margin/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2018/Element_Absolute_Center_with_Margin/</id>
    <published>2018-05-13T01:40:38.000Z</published>
    <updated>2018-10-29T08:29:28.367Z</updated>
    
    <content type="html"><![CDATA[<p>今天偶然在 CodePen 发现了一种不太常见元素绝对居中（水平和垂直）方法，大致思路是使用 margin 和 position 属性。<strong>但它并非是将 margin 置为负，而是直接置为 auto，需要说明的是元素需要声明宽/高</strong>。经过实际测试，该方法确实有效。</p><p>原文链接是 <a href="https://s.codepen.io/shshaw/fullpage/gEiDt##" rel="external nofollow noopener noreferrer" target="_blank">Absolute Centering in CSS</a></p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>！！！以下这一段是废话，可跳过！！！</strong></p><p>一般地，对于已知宽高的元素的居中定位，最先想到的方法是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 50px);</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(50% - 50px);</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两者意思差不对，思路基本一致。</p><p>而如果只是水平居中，基本上使用 <code>margin: 0 auto;</code> 就够了，而且我们也知道 <code>margin: auto;</code> 在垂直方向是不起作用的，作者原文也是这么说的：</p><blockquote><p>We’ve all seen <code>margin: 0 auto;</code> for horizontal centering, but <code>margin: auto;</code> has refused to work for vertical centering… until now! But actually (spoiler alert!) absolute centering only requires a declared height* and these styles.</p></blockquote><p><strong>！！！以上这一段是废话，可你还是看了！！！</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>作者原文提到的代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法被原文作者并命为 <code>Absolute Centering</code>（这种方法可能不是他最早发现，但目前由他这样命名，作者如是说），在这段代码中，每一项都必不可少。当然，若只是需要水平居中，就无需设置高度；若只是垂直居中，就无需设置宽度，但至少有一项，否则不会起作用，这一点是原作者着重强调的。</p><p>效果如图：</p><p><img src="https://floretten-1252347631.cos.ap-beijing-1.myqcloud.com/Web/centering.png" alt="Absolute Centering"></p><h2 id="优点及注意点"><a href="#优点及注意点" class="headerlink" title="优点及注意点"></a>优点及注意点</h2><p><strong>！！以下这段，基本上是翻译转述作者原话！！</strong></p><p>优点：</p><ol><li>跨浏览器支持，在 Chrome，Firefox，Safari，Mobile Safari，Windows Phone 甚至 IE8-10 的最新版本中都能完美运行（没测试，毕竟没那么多设备）。</li><li>没有特殊的标记，风格简约。</li><li>对百分比大小以及 max-/min- 都适用（已测试，确实如此）。</li><li>只使用一个 class 即可居中元素。</li><li>是否设置 padding 没有影响。</li><li>元素块能够随父元素大小自动调整居中状态（希望没理解错，但确实能自适应）。</li><li>对于图片也能完美适用。</li></ol><p>注意点：</p><ol><li>必须声明高度（前面已经强调过）。</li><li>建议设置 <code>overflow: auto</code> 来防止内容溢出（毕竟固定宽/高）。</li></ol><p><strong>！！以上这段，希望没转述错误，可参见作者原文！！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天偶然在 CodePen 发现了一种不太常见元素绝对居中（水平和垂直）方法，大致思路是使用 margin 和 position 属性。&lt;strong&gt;但它并非是将 margin 置为负，而是直接置为 auto，需要说明的是元素需要声明宽/高&lt;/strong&gt;。经过实际测试，该方法确实有效。&lt;/p&gt;
&lt;p&gt;原文链接是 &lt;a href=&quot;https://s.codepen.io/shshaw/fullpage/gEiDt##&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Absolute Centering in CSS&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/CSS/"/>
    
      <category term="元素居中" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>项目中如何使用npm更新package</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2018/NPM_Package_Update/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2018/NPM_Package_Update/</id>
    <published>2018-04-16T13:32:21.000Z</published>
    <updated>2018-10-29T01:20:10.215Z</updated>
    
    <content type="html"><![CDATA[<p>现实需求：使用vue-cli等脚手架工具创建工程后，当工程中的模块有更新时，如何将工程中的模块都更新到最新？</p><h2 id="检查模块更新"><a href="#检查模块更新" class="headerlink" title="检查模块更新"></a>检查模块更新</h2><p>使用 npm 管理工具的检查更新命令能列举出当前工程所有可更新的 node_module：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> outdated <span class="regexp">//</span>检查 <span class="built_in">module</span> 更新</span><br></pre></td></tr></table></figure><p>使用后效果如下所示（只截取了部分数据）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Package</span>                             <span class="selector-tag">Current</span>   <span class="selector-tag">Wanted</span>  <span class="selector-tag">Latest</span>  <span class="selector-tag">Location</span></span><br><span class="line"><span class="selector-tag">autoprefixer</span>                          7<span class="selector-class">.2</span><span class="selector-class">.6</span>    7<span class="selector-class">.2</span><span class="selector-class">.6</span>   9<span class="selector-class">.1</span><span class="selector-class">.3</span>  <span class="selector-tag">navigation</span></span><br><span class="line"><span class="selector-tag">babel-eslint</span>                          8<span class="selector-class">.2</span><span class="selector-class">.6</span>    8<span class="selector-class">.2</span><span class="selector-class">.6</span>   9<span class="selector-class">.0</span><span class="selector-class">.0</span>  <span class="selector-tag">navigation</span></span><br><span class="line"><span class="selector-tag">babel-jest</span>                           21<span class="selector-class">.2</span><span class="selector-class">.0</span>   21<span class="selector-class">.2</span><span class="selector-class">.0</span>  23<span class="selector-class">.4</span><span class="selector-class">.2</span>  <span class="selector-tag">navigation</span></span><br><span class="line"><span class="selector-tag">chromedriver</span>                         2<span class="selector-class">.40</span><span class="selector-class">.0</span>   2<span class="selector-class">.41</span><span class="selector-class">.0</span>  2<span class="selector-class">.41</span><span class="selector-class">.0</span>  <span class="selector-tag">navigation</span></span><br><span class="line"><span class="selector-tag">iview</span>                                2<span class="selector-class">.14</span><span class="selector-class">.3</span>   2<span class="selector-class">.14</span><span class="selector-class">.3</span>   3<span class="selector-class">.0</span><span class="selector-class">.1</span>  <span class="selector-tag">navigation</span></span><br><span class="line"><span class="selector-tag">vue</span>                                  2<span class="selector-class">.5</span><span class="selector-class">.16</span>   2<span class="selector-class">.5</span><span class="selector-class">.17</span>  2<span class="selector-class">.5</span><span class="selector-class">.17</span>  <span class="selector-tag">navigation</span></span><br></pre></td></tr></table></figure><p>图片效果如下所示：</p><p><img src="https://floretten-1252347631.cos.ap-beijing-1.myqcloud.com/npm/npm-outdated.png" alt=""></p><p>输出结果展示了包的类别或名称（Package）、当前包版本（Current）、满足 package.json 中指定 semver 范围的包的最大版本（Wanted）、最新包版本（Latest）以及包所在依赖关系树中的位置（Location），关于该命令的详细解释参见 <a href="https://www.npmjs.com.cn/cli/outdated/" rel="external nofollow noopener noreferrer" target="_blank">npm-outdated</a>。</p><h2 id="单个模块更新"><a href="#单个模块更新" class="headerlink" title="单个模块更新"></a>单个模块更新</h2><p>获取到包最新的版本号，可以通过命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="keyword">module</span>@<span class="keyword">version</span> // <span class="keyword">module</span> 为模块名，<span class="keyword">version</span> 为版本号</span><br></pre></td></tr></table></figure><p>来更新单个模块</p><h2 id="更新所有模块"><a href="#更新所有模块" class="headerlink" title="更新所有模块"></a>更新所有模块</h2><p>更为现实的要求是更新所有模块，然而命令</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update <span class="string">[-g]</span> <span class="string">[&lt;pkg&gt;...]</span></span><br></pre></td></tr></table></figure><p>只能根据 package.json 中的版本指定进行更新，即它会将 Current 版本更新到 Wanted 版本。如果不指定包名，他将更新所有包（全局/本地取决于参数 -g）并且从<a href="mailto:npm@2.6.1" rel="external nofollow noopener noreferrer" target="_blank">npm@2.6.1</a>开始，该命令只会检查顶级软件包。具体效果如下图，与之前相比，Current 与 Wanted 已经保持一致（红色部分没有了）。关于该命令更多详情参见 <a href="https://www.npmjs.com.cn/cli/update/" rel="external nofollow noopener noreferrer" target="_blank">npm-update</a>。</p><p><img src="https://floretten-1252347631.cos.ap-beijing-1.myqcloud.com/npm/npm-update.png" alt="npm-update"></p><p>因此，要想使用这种方法更新所有包，需要手动更改 package.json 文件（或使用程序自动化），比较麻烦。</p><p><strong>更高效的办法是使用插件：npm-check-updates</strong></p><p>安装方法：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-check-updates <span class="regexp">//</span> 使用全局安装，因为不仅限于某个工程使用</span><br></pre></td></tr></table></figure><p>检查更新：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm-check-updates <span class="comment">// 列出所有可更新的包</span></span><br></pre></td></tr></table></figure><p>或者使用缩写：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ncu</span></span><br></pre></td></tr></table></figure><p>效果如下（只截取了部分数据）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Using</span> <span class="selector-tag">E</span>:\<span class="selector-tag">Repos</span>\<span class="selector-tag">navigation</span>\<span class="selector-tag">package</span><span class="selector-class">.json</span></span><br><span class="line"><span class="selector-attr">[..................]</span> \ :</span><br><span class="line"> <span class="selector-tag">iview</span>                               ^2<span class="selector-class">.14</span><span class="selector-class">.3</span>  →   ^3<span class="selector-class">.0</span><span class="selector-class">.1</span></span><br><span class="line"> <span class="selector-tag">autoprefixer</span>                         ^7<span class="selector-class">.1</span><span class="selector-class">.2</span>  →   ^9<span class="selector-class">.1</span><span class="selector-class">.3</span></span><br><span class="line"> <span class="selector-tag">babel-eslint</span>                         ^8<span class="selector-class">.2</span><span class="selector-class">.1</span>  →   ^9<span class="selector-class">.0</span><span class="selector-class">.0</span></span><br><span class="line"> <span class="selector-tag">babel-jest</span>                          ^21<span class="selector-class">.0</span><span class="selector-class">.2</span>  →  ^23<span class="selector-class">.4</span><span class="selector-class">.2</span></span><br><span class="line"> <span class="selector-tag">babel-loader</span>                         ^7<span class="selector-class">.1</span><span class="selector-class">.1</span>  →   ^8<span class="selector-class">.0</span><span class="selector-class">.0</span></span><br><span class="line"> <span class="selector-tag">babel-plugin-dynamic-import-node</span>     ^1<span class="selector-class">.2</span><span class="selector-class">.0</span>  →   ^2<span class="selector-class">.1</span><span class="selector-class">.0</span></span><br><span class="line"> <span class="selector-tag">cross-spawn</span>                          ^5<span class="selector-class">.0</span><span class="selector-class">.1</span>  →   ^6<span class="selector-class">.0</span><span class="selector-class">.5</span></span><br><span class="line"> <span class="selector-tag">css-loader</span>                          ^0<span class="selector-class">.28</span><span class="selector-class">.0</span>  →   ^1<span class="selector-class">.0</span><span class="selector-class">.0</span></span><br><span class="line"> <span class="selector-tag">eslint</span>                              ^4<span class="selector-class">.15</span><span class="selector-class">.0</span>  →   ^5<span class="selector-class">.5</span><span class="selector-class">.0</span></span><br><span class="line"> <span class="selector-tag">eslint-config-standard</span>              ^10<span class="selector-class">.2</span><span class="selector-class">.1</span>  →  ^12<span class="selector-class">.0</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure><p>上述命令后添加参数选项：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="keyword">a</span>, <span class="comment">--upgradeAll</span></span><br></pre></td></tr></table></figure><p>即可完成所有报的更新。</p><p>使用参数选项：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-u, <span class="comment">--upgrade</span></span><br></pre></td></tr></table></figure><p>将更新 package.json 文件。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>为确保相关包已更新，可以再次使用 npm outdated 命令进行检查。</p><p>因为 package.json 文件已更新，则可以使用 npm update 命令更新相关包。此处建议仅供参考，可能会出现奇奇怪怪问题，譬如工程无法运行。</p><p>更多使用详情，参看 <a href="https://www.npmjs.com/package/npm-check-updates" rel="external nofollow noopener noreferrer" target="_blank">npm-check-updates</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现实需求：使用vue-cli等脚手架工具创建工程后，当工程中的模块有更新时，如何将工程中的模块都更新到最新？&lt;/p&gt;
&lt;h2 id=&quot;检查模块更新&quot;&gt;&lt;a href=&quot;#检查模块更新&quot; class=&quot;headerlink&quot; title=&quot;检查模块更新&quot;&gt;&lt;/a&gt;检查模块更新
      
    
    </summary>
    
      <category term="Node" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/Node/"/>
    
    
      <category term="npm" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/npm/"/>
    
      <category term="node" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Vue开发中本地请求数据配置从dev-server.js到webpack-dev-conf.js的迁移</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2018/Dev_Server_Webpack_Dev_Conf/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2018/Dev_Server_Webpack_Dev_Conf/</id>
    <published>2018-03-29T09:34:25.000Z</published>
    <updated>2018-09-09T13:28:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>现实问题：更行后的 vue webpack 模板中没有了 dev-server.js 文件，那么在新版本中如何配置相关文件来完成本地后台模拟数据的访问？</p><p>原来的 dev-server.js 文件中的配置经过重组，由 webpack.dev.conf.js 文件替代，因此需要将之前的配置迁移到这个新文件中。</p><p>详情参见<a href="https://www.xiuyuan.info/?p=230" rel="external nofollow noopener noreferrer" target="_blank">VUE开发请求本地数据的配置，旧版本dev-server.js，新版本webpack.dev.conf.js</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现实问题：更行后的 vue webpack 模板中没有了 dev-server.js 文件，那么在新版本中如何配置相关文件来完成本地后台模拟数据的访问？&lt;/p&gt;
&lt;p&gt;原来的 dev-server.js 文件中的配置经过重组，由 webpack.dev.conf.js 文件
      
    
    </summary>
    
      <category term="Vue" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>CSS实现图片等比例缩放</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2018/CSS_Image_Scale_Up/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2018/CSS_Image_Scale_Up/</id>
    <published>2018-03-18T06:23:51.000Z</published>
    <updated>2018-09-09T13:28:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>对图片使用max-width和max-height，图片会按照父容器宽高自动缩放，并保持图片原本的长宽比，图片相对不变形。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对图片使用max-width和max-height，图片会按照父容器宽高自动缩放，并保持图片原本的长宽比，图片相对不变形。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="前端开发" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue Router+Element UI实现导航实例</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2018/Vue_Element_UI_Default_Active/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2018/Vue_Element_UI_Default_Active/</id>
    <published>2018-03-02T11:27:56.000Z</published>
    <updated>2018-09-09T13:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Element UI是饿了么团队打造的一个前端UI库，其中实现了很多常用的组件，导航栏或者叫菜单栏就属于一种。</p><a id="more"></a><p>在Element UI提供的NavMenu组件中，其提供了一个属性：default-active，它表示当前激活菜单的index。使用该属性可以保持菜单中当前激活的项与当前的页面是一致的，而这其中的关键就在于设置该属性的值。由于页面跳转变化，所以这个属性的值也需要随着当前页面路由的改变而改变，Vue.js官方提供的vue-router刚好可以解决此问题。</p><p>vue-router中提供了一个路由对象(route object)，它表示当前激活的路由的状态信息，包含了当前URL解析得到的信息，还有URL 匹配到的路由记录(route records)。该路由对象有很多属性，诸如$route.path，$route.params，$route.query等，更多详情可以参见<a href="https://router.vuejs.org/zh-cn/api/route-object.html" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>。在这里我们使用$route.path即可，返回值位字符串(string)，对应当前路由的路径，然后将NavMenu中各项的index值设置为相应的路由即可。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">:default-active=<span class="string">"$route.path"</span></span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>冒号(:)不可少，这属于Vue.js的语法问题，不再赘述</li><li>不设置default-active属性时，点击菜单项虽然当前点击项会被激活，但刷新页面后其选中效果就会丢失，页面跟菜单项无法保持一致。</li></ol><p>完整代码实例如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">el</span>-<span class="keyword">menu</span> :default-active=<span class="string">"$route.path"</span> class=<span class="string">"el-menu-demo"</span> <span class="keyword">mode</span>=<span class="string">"horizontal"</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-<span class="keyword">menu</span>-item <span class="built_in">index</span>=<span class="string">"/page1"</span>&gt;page1&lt;/<span class="keyword">el</span>-<span class="keyword">menu</span>-item&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-<span class="keyword">menu</span>-item <span class="built_in">index</span>=<span class="string">"/page2"</span>&gt;page2&lt;/<span class="keyword">el</span>-<span class="keyword">menu</span>-item&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-<span class="keyword">menu</span>-item <span class="built_in">index</span>=<span class="string">"/page3"</span>&gt;page3&lt;/<span class="keyword">el</span>-<span class="keyword">menu</span>-item&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-<span class="keyword">menu</span>-item <span class="built_in">index</span>=<span class="string">"/page4"</span>&gt;page4&lt;/<span class="keyword">el</span>-<span class="keyword">menu</span>-item&gt;</span><br><span class="line">&lt;/<span class="keyword">el</span>-<span class="keyword">menu</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Element UI是饿了么团队打造的一个前端UI库，其中实现了很多常用的组件，导航栏或者叫菜单栏就属于一种。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/Vue/"/>
    
    
      <category term="Vue.js" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Django前后分离快速构建WebApp</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2018/Django_Vue.js_Web/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2018/Django_Vue.js_Web/</id>
    <published>2018-03-02T02:08:53.000Z</published>
    <updated>2018-09-09T13:28:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vue.js是一套用于构建用户界面的渐进式框架，特点是数据驱动，区别传统DOM操作，核心库只关注视图层，易与第三方库或既有项目整合，。而Django由Python的一种经典Web应用框架，采用了MTV模式。两者结合或许能使Web的开发更加高效快捷。</p><h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>本文将采用Vue.js快速搭建前端页面，使用Django提供服务后端的数据接口，从而实现前后端的分离，快速构建Web应用。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol><li><p>Django环境<br>Python 2.7 + Django 1.9 + MySQL 5.7 + Python-MySQL连接件<br><strong>说明</strong>：关于Python与MySQL的连接件可以直接使用pip包管理器安装(Linux上推荐)，也可以直接<a href="https://pypi.python.org/pypi/MySQL-python/1.2.5" rel="external nofollow noopener noreferrer" target="_blank">下载安装包</a>(Windows上推荐)</p></li><li><p>Vue.js环境<br>Node.js 6.1 + Vue.js 2.0<br><strong>说明</strong>：关于Node.js的版本去官方中文网站下载安装包即可，推荐使用稳定版本，Vue.js的安装可以访问<a href="https://cn.vuejs.org/v2/guide/installation.html" rel="external nofollow noopener noreferrer" target="_blank">官网</a>查看安装说明。</p></li></ol><h2 id="构建Django工程"><a href="#构建Django工程" class="headerlink" title="构建Django工程"></a>构建Django工程</h2><ol><li>构建一个工程，使用命令行和PyCarm集成开发环境均可。</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">django-admin startproject Blog</span></span><br></pre></td></tr></table></figure><ol start="2"><li>进入目录创建一个应用。</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage<span class="selector-class">.py</span> startapp Article</span><br></pre></td></tr></table></figure><ol start="3"><li>将该应用加入到settings的INSTALLED_APPS列表。</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">INSTALLED_APPS</span> = [</span><br><span class="line">    <span class="string">'...'</span>,</span><br><span class="line">    <span class="string">'Article'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="4"><li>修改数据库配置，将默认sqlite3数据库更改为MySQL</li></ol><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'Blog'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'1234'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue.js是一套用于构建用户界面的渐进式框架，特点是数据驱动，区别传统DOM操作，核心库只关注视图层，易与第三方库或既有项目整合，。而Django由Python的一种经典Web应用框架，采用了MTV模式。两者结合或许能使Web的开发更加高效快捷。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="Vue" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/Vue/"/>
    
    
      <category term="Vue.js" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/Vue-js/"/>
    
      <category term="Django" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>配置gitment出现Validation Failed问题</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2018/Gitment_Validation_Failed/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2018/Gitment_Validation_Failed/</id>
    <published>2018-01-25T09:32:23.000Z</published>
    <updated>2018-09-09T13:29:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>尝试使用gitment评论系统过程中，配置完成后初始化评论出现验证失败问题(Error: Validation Failed)。</p><a id="more"></a><h2 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h2><p>第一次配置 gitment 时，按照官方文档进行如下设置：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">  id: <span class="string">'Your page ID'</span>, <span class="comment">// optional</span></span><br><span class="line">  owner: <span class="string">'Your GitHub ID'</span>,</span><br><span class="line">  repo: <span class="string">'The repo to store comments'</span>,</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: <span class="string">'Your client ID'</span>,</span><br><span class="line">    client_secret: <span class="string">'Your client secret'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// For more available options, check out the documentation below</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gitment.render(<span class="string">'comments'</span>)</span><br></pre></td></tr></table></figure><p>由于 id 这一项，默认为 window.location.pathname ，于是便删除了这一条。随后 push 到 github，初始化评论(Initialize Comments)时，浏览器边弹窗报错：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Error: </span>Validation Failed</span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>经过一番摸索，疑似是因为 gitment 配置中 id 过长引起的。因为 gitment 是其作者基于 gitHub 的 issue 开发的，每一条 issue 会有两个 label，label 的最大长度限制为50个字符。这个问题多数人都遇到过，关于这个问题的讨论与建议在 gitment 的 issues 上出现过：<a href="https://github.com/imsun/gitment/issues/116" rel="external nofollow noopener noreferrer" target="_blank">Validation Failed ID长度问题建议</a>，印证了前面的想法。问题找到了，那么我们设置一个长度较短的 id 就可以了。</p><p>起初想用 page.title 来作为 id，然而操作并不顺利，因为我的标题大部分是中文，而且长度也都不短，再通过 utf 转码会有一堆 % 占空间，长度必定更长。</p><p>最后决定使用 page.path 作为 id，因为我的 permalink 的配置有所更改，所以 page.path 的长度相对较短，重新设置后初始化成功，Initialize Comments 按钮变成了文字 No Comment Yet 。</p><p>关于我的 permalink 设置(在博客根目录的 config.yml 中)，只保留了 year 和 title：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxx</span><br><span class="line"><span class="symbol">permalink:</span> <span class="symbol">:year/</span><span class="symbol">:title/</span></span><br><span class="line">xxx</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>由于我的 page.path 长度在50个字符以内，所以上述的设置能够成功。但这并不适合所有情况，具体情况具体分析，只要保证 id 在50个字符以内即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尝试使用gitment评论系统过程中，配置完成后初始化评论出现验证失败问题(Error: Validation Failed)。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/Hexo/"/>
    
      <category term="gitment" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/gitment/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统中的字长</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2017/Word_Size_in_Computing_System/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2017/Word_Size_in_Computing_System/</id>
    <published>2017-08-27T08:04:29.000Z</published>
    <updated>2018-09-09T13:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>计算机系统是一个复杂的由内到外的复杂系统，包含了硬件和软件两个部分，而字长作为系统中一个基本单位需要深入理解，本文将总结计算机系统中各种字长的意义。</p><a id="more"></a><h2 id="字与字长"><a href="#字与字长" class="headerlink" title="字与字长"></a>字与字长</h2><p>字(word)是指在计算机中作为一个整体被存取、传送、处理的一组二进制数,是一串数字。而字长(word size)则是这串数字即一个字的位数它是计算机系统结构中的一个重要特性。字长是由CPU的类型所决定，不同的计算机系统的字长是不同的，常见的有8位、16位、32位、64位等，字长越长，计算机一次处理的信息位就越多，精度就越高，字长是计算机性能的一个重要指标。</p><p><strong>注</strong>：计算机系统中，字是一个基本单位，而字长是一种评价指标，注意区分。</p><h2 id="位与字节"><a href="#位与字节" class="headerlink" title="位与字节"></a>位与字节</h2><p>这里顺便提一下字节与位的概念。位(bit，简写为b)是计算机系统中最小的数据单位，也是存储器存储信息的最小单位，存放一位二进制数，即0或1。字节(Byte，简写为B)是计算机系统中表示存储容量的最常用的基本单位。一个字节由8位二进制数组成，一个字符占一个字节，一个汉字占两个字节。</p><p>常见的存储容量计算单位还有KB、MB、GB、TB，另外还有PB、EB、ZB、YB，这几个不是很常见。这些单位之间的换算进率均为1024，即2的10次幂。而B与b之间进率是8，即1B(yte)=8b(it)。在我们使用的应用中计算某种速率用的一般都是b，注意区别与B，不要别欺骗了，例如bps。</p><h2 id="四种字长"><a href="#四种字长" class="headerlink" title="四种字长"></a>四种字长</h2><p>机器字长：CPU一次能处理数据的位数，通常与CPU的寄存器位数有关，一般可以通过寄存器的位数来判断机器字长。<br>存储字长：存储器中一个存储单元(存储地址)所存储的二进制代码的位数，即存储器中的MDR的位数，而其中的二进制代码称作字。<br>指令字长：计算机系统中机器指令的二进制代码总位数，它取决于操作码的长度、操作数地址的长度和操作数地址的个数，不同的指令的字长是不同的。指令字长一般都取存储字长的的整数倍，如果取2倍，则需要2次访存取出一条指令。<br>数据字长：计算机系统中数据存储所占用的位数。</p><p><strong>注</strong>：操作系统的位数是操作系统可以寻址的位数，与机器字长是不一样的。选用多少位的操作系统要考虑处理器的架构和内存的大小。<br>64位操作系统为64位架构的计算机而设计，能够利用64位处理器的优势。但64位机器可以使用64位操作系统系统，也可以使用32位操作系统，而32位机器是无法使用64位操作系统的。<br>另外，<code>在满足前一条件下</code>，操作系统寻址空间最好大于或等于内存的大小，但不易过大，否则操作系统自身会占用大量内存影响机器的速度。如32位系统寻址空间大小位2的32次幂，即4G，但一般只识别3.25-3.75之间。因此4G及以下的内存空间一般安装32位系统。</p><p>冯诺依曼机中，指令和数据同等重要，都存放在存储器中，并可按地址寻访。<br>早期的计算机：指令字长 = 机器字长 = 存储字长。故访问某个存储单元便可取一条完整的指令或一条完整的数据，这些机器的指令字长是固定的，控制方式比较简单。<br>随着计算机的发展，存储容量增大，处理的数据类型增多，计算机指令字长发生很大变化。一台机器的指令系统可以采用位数不相同的指令，即指令字长是可变的，如单字节指令、多字节指令。控制这类指令的电路较为复杂，多字节指令则需要多次访存才能取出一条完整的指令，因此CPU速度下降。三者可能各不相同，但它们必须是字节的整数倍。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机系统是一个复杂的由内到外的复杂系统，包含了硬件和软件两个部分，而字长作为系统中一个基本单位需要深入理解，本文将总结计算机系统中各种字长的意义。&lt;/p&gt;
    
    </summary>
    
      <category term="系统结构" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="字长" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/%E5%AD%97%E9%95%BF/"/>
    
      <category term="计算机系统" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>更换畅言评论系统</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2017/Hexo_Change_to_Cyan/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2017/Hexo_Change_to_Cyan/</id>
    <published>2017-07-31T09:43:09.000Z</published>
    <updated>2018-09-09T13:29:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为一些未知原因，越来越多第三方评论系统纷纷停止服务。2017年多说评论宣布将停止服务，这无疑给用户带来了麻烦，迁徙成了一种选择，本文以实际操作简单介绍搜狐畅言系统的配置。</p><a id="more"></a><h2 id="畅言配置"><a href="#畅言配置" class="headerlink" title="畅言配置"></a>畅言配置</h2><p>使用畅言系统必须提供网站的备案号，否则只能使用 15 天。毕竟现在国家网络信息管的紧，网站都需要备案的，使用独立的域名的司机们应该都备过案了。另外的福利是畅言有广告服务，同意其广告协议可以有广告收入，当然如果你不需要可以不用管它。</p><h3 id="注册获取通用代码"><a href="#注册获取通用代码" class="headerlink" title="注册获取通用代码"></a>注册获取通用代码</h3><p>畅言提供了桌面端、移动端、自适应等几类代码，可根据需要选择自己需要的。本站使用的是自适应的代码，就以此为例说明几点情况。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--PC和WAP自适应版--&gt;</span><br><span class="line">&lt;div id=<span class="string">"SOHUCS"</span> sid=<span class="string">"请将此处替换为配置SourceID的语句"</span> &gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> appid = <span class="string">'你的APPID'</span>;</span><br><span class="line"><span class="keyword">var</span> conf = <span class="string">'你的APPKEY'</span>;</span><br><span class="line"><span class="keyword">var</span> width = <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"><span class="keyword">if</span> (width &lt; <span class="number">960</span>) &#123;</span><br><span class="line"><span class="built_in">window</span>.document.write(<span class="string">'&lt;script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id='</span> + appid + <span class="string">'&amp;conf='</span> + conf + <span class="string">'"&gt;&lt;\/script&gt;'</span>); &#125; <span class="keyword">else</span> &#123; <span class="keyword">var</span> loadJs=<span class="function"><span class="keyword">function</span>(<span class="params">d,a</span>)</span>&#123;<span class="keyword">var</span> c=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>]||<span class="built_in">document</span>.head||<span class="built_in">document</span>.documentElement;<span class="keyword">var</span> b=<span class="built_in">document</span>.createElement(<span class="string">"script"</span>);b.setAttribute(<span class="string">"type"</span>,<span class="string">"text/javascript"</span>);b.setAttribute(<span class="string">"charset"</span>,<span class="string">"UTF-8"</span>);b.setAttribute(<span class="string">"src"</span>,d);<span class="keyword">if</span>(<span class="keyword">typeof</span> a===<span class="string">"function"</span>)&#123;<span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;b.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> e=b.readyState;<span class="keyword">if</span>(e===<span class="string">"loaded"</span>||e===<span class="string">"complete"</span>)&#123;b.onreadystatechange=<span class="literal">null</span>;a()&#125;&#125;&#125;<span class="keyword">else</span>&#123;b.onload=a&#125;&#125;c.appendChild(b)&#125;;loadJs(<span class="string">"https://changyan.sohu.com/upload/changyan.js"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">window</span>.changyan.api.config(&#123;<span class="attr">appid</span>:appid,<span class="attr">conf</span>:conf&#125;)&#125;); &#125; &#125;)(); <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>上面的代码中需要替换的有三处：SourceID、APPID、APPKEY：</p><ol><li>SourceID 就是文章获页面的唯一标识，就是数据库表中的(类似)主键，因为评论在数据库中存储要与对应的文章会页面匹配，否则会出现评论的混乱。对于 Hexo，可以把相关页的链接（如page.path/url_for(page.path)）或者标题（如page.title）作为 SourceID。</li><li>APPID和APPKEY在畅言的后台都可以获取。需要注意的是 APPKEY，在后台给的代码中，APPKEY 位置给出的是以<code>prod</code>开头的一串代码，而在其帮助文档中写的是 APPKEY ，虽然两串代码不相同，但都能实现功能，任选一种即可，建议使用 APPKEY。</li></ol><h3 id="安装其他插件"><a href="#安装其他插件" class="headerlink" title="安装其他插件"></a>安装其他插件</h3><p>除主体评论框外，畅言还提供了诸如评论数目、热门评论、热评用户等插件，可根据需要自行选择，本站只安装了评论数目，简单说一下注意事项。</p><p>关于评论数目的代码，畅言官方提供了三种，详情可访问<a href="http://changyan.kuaizhan.com/install/code/comment-count-code" rel="external nofollow noopener noreferrer" target="_blank">获取评论数代码</a>。主要就是两种情况：含评论框的页面和不含评论框的页面，前者适用于列表页，后者适用于详情页，至于原因那就是不言而喻了。经本站测试其实都使用<code>不含评论框那种代码</code>即可，不过<strong>需要注意</strong>的是，不要更改的标签名称，否则会出问题，这是本站已经测试过的，也是不得不吐槽的一点了。</p><p>更多插件可登录<a href="http://changyan.kuaizhan.com/labs/list" rel="external nofollow noopener noreferrer" target="_blank">畅言后台</a>获取。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为一些未知原因，越来越多第三方评论系统纷纷停止服务。2017年多说评论宣布将停止服务，这无疑给用户带来了麻烦，迁徙成了一种选择，本文以实际操作简单介绍搜狐畅言系统的配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>在前端开发中使用谷歌字体</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2017/Google_Fonts/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2017/Google_Fonts/</id>
    <published>2017-04-30T11:30:04.000Z</published>
    <updated>2018-09-09T13:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录了如何使用谷歌的独门字体库神器！</p><a id="more"></a><h2 id="谷歌字体库"><a href="#谷歌字体库" class="headerlink" title="谷歌字体库"></a>谷歌字体库</h2><p>网站大概长这个样</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/Google/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%2820%29.png" alt="Google Fonts"></p><p>网址在这</p><p><a href="https://fonts.google.com/" rel="external nofollow noopener noreferrer" target="_blank">Google Fonts</a></p><h2 id="在线使用"><a href="#在线使用" class="headerlink" title="在线使用"></a>在线使用</h2><p>访问谷歌字体网站，选择想要使用的字体，随后页面下方会弹出一个悬浮页面，里面提供了使用该字体的方法。</p><p>一种是HTML标签<code>link</code>引入，然后在css中使用<code>font-family</code>属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/css?family=XXX"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://floretten-1252347631.costj.myqcloud.com/Google/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%2821%29.png" alt="link"></p><p>另一种是使用CSS的引入方式<code>@import</code>，然后同样是在css中使用<code>font-family</code>属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> url(<span class="string">'https://fonts.googleapis.com/css?family=XXX'</span>);</span><br></pre></td></tr></table></figure><p><img src="https://floretten-1252347631.costj.myqcloud.com/Google/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%2822%29.png" alt="@import"></p><h2 id="离线使用"><a href="#离线使用" class="headerlink" title="离线使用"></a>离线使用</h2><p>前面两种方式均是引入谷歌字体库的链接，我们也可以下载谷歌字体文件离线使用，谷歌字体提供了下载接口。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/Google/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%2823%29.png" alt="下载字体"></p><p>下载之后用本地方式引入 css 中，即下面这种方式，其中<strong><em>xxx.eot/woff/ttf</em></strong>等即为下载的字体文件，根据下载的字体格式，选择性使用下面的代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'xxx'</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../fonts/xxx.eot'</span>);</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../fonts/xxx.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">'../fonts/xxx.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">'../fonts/xxx.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">'../fonts/xxx.svg#xxx'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文只介绍怎么用，至于能不能用就要看众多老司机们了，虽然大流氓曾经做过谷歌字体的代理，不过现在已经正式停止服务了。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/Google/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%2825%29.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录了如何使用谷歌的独门字体库神器！&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="谷歌字体" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/%E8%B0%B7%E6%AD%8C%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>配置Python 2.7连接MySQL中的问题</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2017/MySQL_Python/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2017/MySQL_Python/</id>
    <published>2017-04-03T07:32:12.000Z</published>
    <updated>2018-09-09T13:29:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题出现在使用Django(Python 2.7 64 Bit)构建Web应用的过程中，由于使用MySQL作为数据库，所以需要安装Python与MySQL连接的中间件MySQL-Python。</p><a id="more"></a><h2 id="缺少MySQLdb模块"><a href="#缺少MySQLdb模块" class="headerlink" title="缺少MySQLdb模块"></a>缺少MySQLdb模块</h2><p>没有安装该中间件会报错缺少MySQLdb的模块</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django<span class="selector-class">.core</span><span class="selector-class">.exceptions</span><span class="selector-class">.ImproperlyConfigured</span>: Error loading MySQLdb module: No module named MySQLdb</span><br></pre></td></tr></table></figure><h2 id="命令行安装MySQL-Python"><a href="#命令行安装MySQL-Python" class="headerlink" title="命令行安装MySQL-Python"></a>命令行安装MySQL-Python</h2><p>根据提示及网上建议，使用pip来安装该模块</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> MySQL-python</span><br></pre></td></tr></table></figure><p>然而问题再次出现，需要Microsoft Visual C++ 9.0</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">error: </span>Microsoft Visual C++ 9.0 is required. Get it from http://aka.ms/vcpython27</span><br></pre></td></tr></table></figure><p>根据提示安装VC++ 9.0后，再次尝试，依然失败。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: command 'C:<span class="symbol">\\</span>Users<span class="symbol">\\</span>RAY<span class="symbol">\\</span>AppData<span class="symbol">\\</span>Local<span class="symbol">\\</span>Programs<span class="symbol">\\</span>Common<span class="symbol">\\</span>Microsoft<span class="symbol">\\</span>Visual C++ for Python<span class="symbol">\\</span>9.0<span class="symbol">\\</span>VC<span class="symbol">\\</span>Bin<span class="symbol">\\</span>amd64<span class="symbol">\\</span>cl.exe' failed with exit status 2</span><br></pre></td></tr></table></figure><h2 id="EXE方式安装MySQL-python"><a href="#EXE方式安装MySQL-python" class="headerlink" title="EXE方式安装MySQL-python"></a>EXE方式安装MySQL-python</h2><p>问题多多，放弃该方法，按网上所说直接下载已经编译好的exe包。访问<a href="https://pypi.python.org/pypi/MySQL-python/1.2.5" rel="external nofollow noopener noreferrer" target="_blank">Python Package</a>，下载了MySQL-python-1.2.5.win32-py2.7.exe，安装完成后，不在报错缺失模块，但出现了utf-8字符编码的问题</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'utf8</span>' codec can<span class="symbol">'t</span> decode byte <span class="number">0</span>xb2 <span class="keyword">in</span> position <span class="number">20</span>: invalid start byte</span><br></pre></td></tr></table></figure><p>经过一番探究，发现可能是因为我使用的是Python 2.7，而MySQL-python是32位的，版本不匹配，然而Python Package网站上只有32位的安装包。</p><p>上网搜索64位安装包，终于发现了一个新网站：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python" rel="external nofollow noopener noreferrer" target="_blank">Unofficial Windows Binaries for Python Extension Packages</a>，下载<strong>MySQL_python-1.2.5-cp27-none-win_amd64.whl</strong>到本地，然后使用pip安装</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">pip</span> <span class="selector-tag">install</span> <span class="selector-tag">MySQL_python-1</span><span class="selector-class">.2</span><span class="selector-class">.5-cp27-none-win_amd64</span><span class="selector-class">.whl</span></span><br></pre></td></tr></table></figure><p>安装完成后，尝试运行Django，不在报错完美运行</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最后说明一下，MySQL-python支持Python 2，如果使用Python 3，需要使用pymysql作为连接中间件，其安装方法简单，不会由上述一系列问题，具体步骤可上网搜索，此处不再赘述。</p><p>吐槽一下，Python 2对中文太不友好了，大家还是迁移到Python 3吧，Python官方已将于2020年停止维护Pyhton 2系列版本，著名科学计算包NumPy也不再维护Python 2版本，经典Web框架Django 2系列版本也不再支持Python2，这些都说明Python 3正在发展壮大，所以还是快快使用潮流吧！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题出现在使用Django(Python 2.7 64 Bit)构建Web应用的过程中，由于使用MySQL作为数据库，所以需要安装Python与MySQL连接的中间件MySQL-Python。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/Python/"/>
    
    
      <category term="Python" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/Python/"/>
    
      <category term="MySQL" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>贝塞尔曲线初探</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2017/Cubic_Bezier/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2017/Cubic_Bezier/</id>
    <published>2017-04-01T07:32:10.000Z</published>
    <updated>2018-09-09T13:28:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 CSS 的 transition 时接触到贝塞尔曲线，初步总结一些学习心得。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 CSS 的 transition 时接触到贝塞尔曲线，初步总结一些学习心得。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="贝塞尔曲线" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 插件收集</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2017/JS_Plugins/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2017/JS_Plugins/</id>
    <published>2017-03-28T02:30:14.000Z</published>
    <updated>2018-09-09T13:29:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>汇集平时用过的 Javascript 插件，日后持续更新。</p><a id="more"></a><h2 id="Bootstrap-相关"><a href="#Bootstrap-相关" class="headerlink" title="Bootstrap 相关"></a>Bootstrap 相关</h2><ol><li><p>bootstrap-dualllistbox<br> 项目主页：<a href="http://www.virtuosoft.eu/code/bootstrap-duallistbox/" rel="external nofollow noopener noreferrer" target="_blank">duallistbox</a></p></li><li><p>bootstrap-progressbar<br> 项目主页：<a href="http://www.minddust.com/project/bootstrap-progressbar/" rel="external nofollow noopener noreferrer" target="_blank">progressbar</a></p></li><li><p>bootstrap-select<br> 项目主页：<a href="http://silviomoreto.github.io/bootstrap-select/" rel="external nofollow noopener noreferrer" target="_blank">select</a></p></li></ol><h2 id="访问效率"><a href="#访问效率" class="headerlink" title="访问效率"></a>访问效率</h2><ol><li><p>FastClick<br>项目主页：<a href="https://github.com/ftlabs/fastclick" rel="external nofollow noopener noreferrer" target="_blank">FastClick</a></p></li><li><p>lazyload<br> 项目主页：<a href="http://www.appelsiini.net/projects/lazyload" rel="external nofollow noopener noreferrer" target="_blank">lazyload</a></p></li></ol><h2 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h2><ol><li><p>Velocity.js<br>项目主页：<a href="http://velocityjs.org/" rel="external nofollow noopener noreferrer" target="_blank">Velocity.js</a><br>中文文档：<a href="http://www.mrfront.com/docs/velocity.js/index.html" rel="external nofollow noopener noreferrer" target="_blank">Velocity.js中文文档</a></p></li><li><p>wow.js<br> 项目主页：<a href="http://mynameismatthieu.com/WOW/" rel="external nofollow noopener noreferrer" target="_blank">WOW</a></p></li><li><p>scrollreveal<br> 项目主页：<a href="https://scrollrevealjs.org/" rel="external nofollow noopener noreferrer" target="_blank">scrollreveal</a></p></li></ol><h2 id="图片相关"><a href="#图片相关" class="headerlink" title="图片相关"></a>图片相关</h2><ol><li><p>lightGallery<br> 项目主页：<a href="http://sachinchoolur.github.io/lightGallery/" rel="external nofollow noopener noreferrer" target="_blank">lightGallery</a></p></li><li><p>Justified Gallery<br> 项目主页：<a href="http://miromannino.github.io/Justified-Gallery/" rel="external nofollow noopener noreferrer" target="_blank">Justified Gallery</a></p></li><li><p>PhotoSwipe<br>项目主页：<a href="http://photoswipe.com/" rel="external nofollow noopener noreferrer" target="_blank">PhotoSwipe</a></p></li></ol><h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><ol><li><p>highcharts<br>项目主页：<a href="https://www.hcharts.cn/" rel="external nofollow noopener noreferrer" target="_blank">highchart</a></p></li><li><p>echarts<br>项目主页：<a href="http://echarts.baidu.com/" rel="external nofollow noopener noreferrer" target="_blank">echarts</a></p></li><li><p>ichart.js<br>项目主页：<a href="http://www.ichartjs.com/" rel="external nofollow noopener noreferrer" target="_blank">ichartjs</a></p></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li><p>一个网站：<a href="http://www.jq22.com/" rel="external nofollow noopener noreferrer" target="_blank">jQuery插件库</a></p></li><li><p>文件下载：<a href="http://danml.com/download.html" rel="external nofollow noopener noreferrer" target="_blank">download.js</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;汇集平时用过的 Javascript 插件，日后持续更新。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Javascript" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>分享一款 Hexo 主题</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2017/Hexo_Theme_Astrid/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2017/Hexo_Theme_Astrid/</id>
    <published>2017-03-06T07:30:14.000Z</published>
    <updated>2018-09-09T13:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>从<code>WordPress</code>上移植的一款主题，托管于 <a href="https://github.com/Evandoz/hexo-theme-astrid" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a> ，访问 <a href="https://blog.floretten.com/hexo-theme-astrid/" rel="external nofollow noopener noreferrer" target="_blank">Astrid</a> 可进行预览。</p><a id="more"></a><h2 id="主题预览"><a href="#主题预览" class="headerlink" title="主题预览"></a>主题预览</h2><p><img src="https://floretten-1252347631.costj.myqcloud.com/astrid/preview-desktop.png" alt="Desktop Preview"></p><h2 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/Evandoz/hexo-theme-astrid.git themes/astrid</span></span><br></pre></td></tr></table></figure><p>  详情请访问 <a href="https://github.com/Evandoz/hexo-theme-astrid" rel="external nofollow noopener noreferrer" target="_blank">hexo-theme-astrid</a></p><h2 id="主题特性"><a href="#主题特性" class="headerlink" title="主题特性"></a>主题特性</h2><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><p>Astrid 主题在非文章详情页提供 6 种挂件，这些挂件默认都展示，可在配置文件中通过注释来决定是否展示。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">recent_posts</span><span class="comment">#最近文章</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">social</span><span class="comment">#社交链接，可自行修改</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">archive</span><span class="comment">#文章归档</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">tagcloud</span><span class="comment">#标签云</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">category</span><span class="comment">#文章分类</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">recent_comments</span><span class="comment">#最近评论</span></span><br></pre></td></tr></table></figure><p>另外，Astrid 主题在文章详情页侧边栏可展示文章目录，效果如图。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/astrid/toc.png" alt="toc"></p><h3 id="动态云标签"><a href="#动态云标签" class="headerlink" title="动态云标签"></a>动态云标签</h3><p>Astrid 主题使用动态云标签，这样可解决标签数量过多占据大量页面的问题，当然可以选择不显示标签挂件。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/astrid/tagcloud.gif" alt="tagcloud"></p><h3 id="文章图片"><a href="#文章图片" class="headerlink" title="文章图片"></a>文章图片</h3><p><strong>Astrid</strong> 主题使用 <a href="https://sachinchoolur.github.io/lightgallery.js/" rel="external nofollow noopener noreferrer" target="_blank">lightgallery.js</a> 展示图片，效果如图。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/astrid/lightgallery.png" alt="lightgallery"></p><h3 id="文章版权声明"><a href="#文章版权声明" class="headerlink" title="文章版权声明"></a>文章版权声明</h3><p>Astrid 在文章末尾添加有关文章版权信息的声明，声明内容可在<code>layout/_partial/post/copyright.ejs</code>文件中自行定制,效果如图。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/astrid/copyright.png" alt="copyright"></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>Astrid 主题完成不久，尚有很多不足之处，望多多指正。另外该主题移植于 Astrid ，此处向原作者致谢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从&lt;code&gt;WordPress&lt;/code&gt;上移植的一款主题，托管于 &lt;a href=&quot;https://github.com/Evandoz/hexo-theme-astrid&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt; ，访问 &lt;a href=&quot;https://blog.floretten.com/hexo-theme-astrid/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Astrid&lt;/a&gt; 可进行预览。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/Hexo/"/>
    
      <category term="Astrid" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/Astrid/"/>
    
  </entry>
  
  <entry>
    <title>使用 flow.ci 自动部署 Hexo</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2016/Flow_CI_Hexo/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2016/Flow_CI_Hexo/</id>
    <published>2016-11-19T07:53:14.000Z</published>
    <updated>2018-09-09T13:28:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>国内持续集成工具<code>flow.ci</code>上线，尝试将其用于<code>Coding.net</code>仓库代码的构建与测试。</p><h2 id="认识-flow-ci"><a href="#认识-flow-ci" class="headerlink" title="认识 flow.ci"></a>认识 flow.ci</h2><hr><p><a href="http://flow.ci/" rel="external nofollow noopener noreferrer" target="_blank">flow.ci</a> 采用工作流机制，功能与 Travis CI 差不多，被称为国内的 Travis CI。</p><blockquote><p>融入 Workflow 机制的持续集成，让代码在 Build, Test, Deploy 间轻盈灵动</p></blockquote><p>关于 flow.ci 的更多介绍，可以访问其<a href="http://blog.flow.ci/" rel="external nofollow noopener noreferrer" target="_blank">官方博客</a>。</p><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><hr><p>关于使用 flow.ci 自动部署 Hexo 的方法，网上目前只在 Juglans’ Blog 中出现过。而作者提供的方法要把 id_rsa 文件放在博客源码中，如果使用 public 库，此法并不推荐。因为个人网站是双线托管，只拥有 GitHub public，于是要尝试新方法。</p><h3 id="注册-flow-ci"><a href="#注册-flow-ci" class="headerlink" title="注册 flow.ci"></a>注册 flow.ci</h3><p>必要步骤，有兴趣可以去 flow.ci 官网申请内测以获取邀请码。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/flow.ci/flow.ci001.png" alt="flow.ci"></p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>在 flow.ci 拉取仓库源码，创建相应的项目进行自动部署，flow.ci de工作流机制让操作变得简单。</p><p>具体的按照下面的顺序操作即可：<br>创建项目 -&gt; 选择代码源 -&gt; 选择用户 -&gt; 选择仓库 -&gt; 创建工作流 -&gt; 选择脚本模板。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/flow.ci/flow.ci003.png" alt="选择模板"></p><h3 id="设置触发器"><a href="#设置触发器" class="headerlink" title="设置触发器"></a>设置触发器</h3><p>设置自动部署触发器，因为我是把源代码放在放在分支 hexo 中，博客静态文件放在分支 master 中，所以我选设置为 push hexo 时触发。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/flow.ci/flow.ci004.png" alt="触发器"></p><h3 id="配置工作流"><a href="#配置工作流" class="headerlink" title="配置工作流"></a>配置工作流</h3><p>配置工作流，这里我们把 <code>测试</code> 部分删掉，然后加上 <code>自定义脚本</code>。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/flow.ci/flow.ci005.png" alt="自定义脚本"></p><p>脚本参考代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Hexo命令行工具</span></span><br><span class="line">flow_cmd <span class="string">"npm install hexo-cli -g"</span> --<span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行Hexo生成</span></span><br><span class="line">flow_cmd <span class="string">"hexo clean"</span> --<span class="built_in">echo</span></span><br><span class="line">flow_cmd <span class="string">"hexo g"</span> --<span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行Hexo推送，这里没有使用 hexo d，因为没有权限</span></span><br><span class="line">flow_cmd <span class="string">"cd ./public"</span> --<span class="built_in">echo</span></span><br><span class="line">flow_cmd <span class="string">"git init"</span> --<span class="built_in">echo</span></span><br><span class="line">flow_cmd <span class="string">"git config user.name "</span>your name<span class="string">" "</span> --<span class="built_in">echo</span>  <span class="comment">#修改name</span></span><br><span class="line">flow_cmd <span class="string">"git config user.email "</span>your email<span class="string">" "</span> --<span class="built_in">echo</span>  <span class="comment">#修改email</span></span><br><span class="line">flow_cmd <span class="string">"git add ."</span> --<span class="built_in">echo</span></span><br><span class="line">flow_cmd <span class="string">"git commit -m "</span>site update<span class="string">" "</span> --<span class="built_in">echo</span></span><br><span class="line">flow_cmd <span class="string">"git push --force --quiet "</span>git@git.coding.net:your name/reponame.git<span class="string">" master:master"</span> --<span class="built_in">echo</span> <span class="comment"># 修改repo</span></span><br></pre></td></tr></table></figure><h3 id="配置-Token"><a href="#配置-Token" class="headerlink" title="配置 Token"></a>配置 Token</h3><p>我们创建项目后，flow.ci 会自动在 Coding.net 中添加部署公钥，但是这个公钥只有只读权限，用于拉取（git clone）仓库代码，并没有推送权限。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/flow.ci/flow.ci006.png" alt="flow.ci"></p><p>所以现在我们把它删除，重新添加这个公钥，并勾选<code>推送功能</code>，这样这个公钥就拥有了推送回 Coding.net 的权限了，提高了安全性。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/flow.ci/flow.ci007.png" alt="coding.net"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>配置完后可以手动创建来测试一下是否成功，如不成功可以查看构建日志来查找不成功的原因。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/flow.ci/flow.ci008.png" alt="手动创建"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><p>本文所提供自动部署 Hexo 方法解决了代码库安全性问题。如此便可专注于写好文章，构建部署就全交给 flow.ci 完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;国内持续集成工具&lt;code&gt;flow.ci&lt;/code&gt;上线，尝试将其用于&lt;code&gt;Coding.net&lt;/code&gt;仓库代码的构建与测试。&lt;/p&gt;
&lt;h2 id=&quot;认识-flow-ci&quot;&gt;&lt;a href=&quot;#认识-flow-ci&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Hexo" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/Hexo/"/>
    
      <category term="flow.ci" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/flow-ci/"/>
    
  </entry>
  
  <entry>
    <title>空数据段引发的问题及思考</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2016/Something_About_Data_Segment/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2016/Something_About_Data_Segment/</id>
    <published>2016-11-11T08:30:14.000Z</published>
    <updated>2018-09-09T13:29:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前使用<code>Dosbox</code>环境编写汇编程序遇到的一个问题，经过摸索已基本搞清楚原因。</p><a id="more"></a><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><hr><p>原题目很简单，就是将 00F~0FH 共 16 个数字写入内存 3000H 开始的连续 16 个存储单元，但是我当时很纳闷为什么要写在 3000H 开始的内存中，于是就直接写在 0000H 开始的内存单元中，而且为了省事把前一个代码的数据段、代码段定义部分直接搬过来，但是写完后发现数据段并没有用到，心想也没有什么影响，就没有管它，然后就出错了。</p><p><strong>代码如下：</strong></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DATA <span class="meta">SEGMENT</span></span><br><span class="line"></span><br><span class="line">DATA ENDS</span><br><span class="line">CODE <span class="meta">SEGMENT</span></span><br><span class="line">        <span class="meta">ASSUME</span> <span class="built_in">CS</span>:CODE, <span class="built_in">DS</span>:DATA</span><br><span class="line"><span class="symbol">START:</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">AX</span>,DATA</span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">DS</span>,<span class="built_in">AX</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">DI</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">CX</span>,<span class="number">16</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">AL</span>,<span class="number">0</span></span><br><span class="line"><span class="symbol">CWRITE:</span></span><br><span class="line">        <span class="keyword">MOV</span> [<span class="built_in">DI</span>],<span class="built_in">AL</span></span><br><span class="line">        <span class="keyword">INC</span> <span class="built_in">AL</span></span><br><span class="line">        <span class="keyword">INC</span> <span class="built_in">DI</span></span><br><span class="line">        <span class="keyword">LOOP</span> CWRITE</span><br><span class="line"><span class="symbol">EXIT:</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="number">AH</span>,<span class="number">4CH</span></span><br><span class="line">        <span class="keyword">INT</span> <span class="number">21H</span></span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure><h2 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h2><hr><p><strong>出错结果：</strong></p><p><img src="https://floretten-1252347631.costj.myqcloud.com/Assembly/DosBox001.png" alt="errorview"></p><p>程序运行结束时 <code>CX=0002</code>，也就是说循环 <code>LOOP</code> 提前退出，这很奇怪！！！</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/Assembly/DosBox002.png" alt="errorview"></p><p>而且我们查看当前内存单元的内容发现，我们的数据并没有正确写入，最后两个数据是不正确的。</p><h2 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h2><hr><p>为了搞清楚问题出在哪，接下来进行单步调试，来一步一步看程序是如何执行的，尤其看一下 <code>CX=0002</code> 时，程序究竟在干嘛！！！</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/Assembly/DosBox003.png" alt="trackview"></p><p>单步执行开始，此时 <code>CX=000F</code>，继续向下，中间部分都符合程序正常逻辑。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/Assembly/DosBox004.png" alt="trackview"></p><p>现在来到 <code>CX=0002</code>，往下应该是继续执行循环体，<strong>但是</strong>，问题出现了！！！</p><ol><li>首先，冒出了一句程序中没有的代码 <code>OR AX, 05FE</code>，并且发现<code>05FE</code> 就是之前查看内存时，被错误写入的那两个数据；</li><li>接着看一下这条指令在内存中的位置 <code>076A:000D</code> ，单步调试开始的时候，<code>076A:000D</code> 中的指令是 <code>MOV [DI], AL</code>。也就是说，当执行若干次循环到 <code>CX=0002</code> 的时候，该内存单元的内容被修改；</li><li>最后来看这块连续内存(000D-000F)中存储的内容，此时这块内存中内容为 <code>OD05FE</code>，而单步调试开始的时候，该连续内存中的内容是 <code>8805</code>。</li></ol><p>通过上述三点分析，已经不难发现，我们的程序在执行的后期被我们的数据修改了，数据从 <code>0000</code> 单元开始写入，当写到 <code>000D</code> 单元时，刚好碰到代码区，将原本的循环体内容覆盖，导致本该循环执行的指令出现差错，程序异常退出。<br>但是新的问题又出现了，数据段与代码段开始的地方为什么会离得这么近以至于出现如此近距离的冲突，我们做进一步探究…</p><h2 id="深入探究"><a href="#深入探究" class="headerlink" title="深入探究"></a>深入探究</h2><hr><p>在程序开始时我们看一下数据段与代码段在内存中的位置</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/Assembly/DosBox005.png" alt="errorview"></p><p>程序开始前，数据段 <code>DS=075A</code>，代码段 <code>CS=076A</code>，两者相差 <code>100H</code>，即 256 个内存单元；然而当执行完装段操作(MOV DS, AX)后，数据段与代码段却变成一样的了(076A)，难怪会出现重叠。那么就是说我们定义的数据段和代码段是同一个位置开始的，那如果把数据段去掉结果会如何呢？</p><p><strong>代码如下：</strong></p><p>去掉 <code>DATA     SEGMENT</code> 的定义</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CODE <span class="meta">SEGMENT</span></span><br><span class="line">        <span class="meta">ASSUME</span> <span class="built_in">CS</span>:CODE</span><br><span class="line"><span class="symbol">START:</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">DI</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">CX</span>,<span class="number">16</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">AL</span>,<span class="number">0</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p><strong>结果展示：</strong></p><p><img src="https://floretten-1252347631.costj.myqcloud.com/Assembly/DosBox006.png" alt="rightview"></p><p>去掉数据段之后，结果是正确的，只是这时数据是写在 <code>075A:0000</code> 开始的位置了。难道我们定义了数据段就会出现这样的问题，那么当年 Intel 的工程师们也太弱了吧，居然会出现这么严重的 Bug，但接下来的探究证明 Intel 毕竟是 Intel，不然 8086 也不会成为一代经典之作。</p><h2 id="进一步发现"><a href="#进一步发现" class="headerlink" title="进一步发现"></a>进一步发现</h2><hr><p>在之前的代码中虽然定义了数据段，但是并没有在其中定义数据，也就是说我们定义了一个空数据段，那么现在我们在数据段中定义一个数据，虽然我们不用它。</p><p><strong>代码如下：</strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DATA <span class="meta">SEGMENT</span></span><br><span class="line">        A <span class="built_in">DB</span> <span class="number">00H</span> <span class="comment">;定义数字</span></span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">CODE <span class="meta">SEGMENT</span></span><br><span class="line">        <span class="meta">ASSUME</span> <span class="built_in">CS</span>:CODE, <span class="built_in">DS</span>:DATA</span><br><span class="line"><span class="symbol">START:</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">AX</span>,DATA</span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">DS</span>,<span class="built_in">AX</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">DI</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">CX</span>,<span class="number">16</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">AL</span>,<span class="number">0</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><p><strong>结果展示：</strong></p><p><img src="https://floretten-1252347631.costj.myqcloud.com/Assembly/DosBox007.png" alt="rightview"></p><p>加上 <code>DATA     SEGMENT</code> 的定义，并且在其中定义变量之后，结果正确，那么看一下此时代码段与数据段的位置。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/Assembly/DosBox008.png" alt="rightview"></p><p>此时，数据段 <code>DS=076A</code>，代码段 <code>CS=076B</code>，并且装段前后皆如此，他们之间相差 <code>10H</code>，即 16 个内存单元。这里我们只定义了一个字节型数据，系统默认为我们空出 16 个字节的，那么若是定义两个，三个会如何呢？<br>通过测试发现它是根据我们定义数据所占用内存单元的大小来为我们留出相应空间的，并且是以 16 个字节为一个单位，例如，当我们定义了 17 个字节型数据，它默认留出的空间是 32 个内存单元，当我们定义了 17 个字型数据，它默认留出的空间是 48 个内存单元，以此类推。</p><p>下面是定义了 17 个字节型数据的代码及演示结果。</p><p><strong>代码如下：</strong></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DATA <span class="meta">SEGMENT</span></span><br><span class="line">        A <span class="built_in">DB</span> <span class="number">17</span> DUP(<span class="number">00H</span>) <span class="comment">;定义数字</span></span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">CODE <span class="meta">SEGMENT</span></span><br><span class="line">        <span class="meta">ASSUME</span> <span class="built_in">CS</span>:CODE, <span class="built_in">DS</span>:DATA</span><br><span class="line"><span class="symbol">START:</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">AX</span>,DATA</span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">DS</span>,<span class="built_in">AX</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">DI</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">CX</span>,<span class="number">16</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">AL</span>,<span class="number">0</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p><strong>结果展示：</strong></p><p><img src="https://floretten-1252347631.costj.myqcloud.com/Assembly/DosBox009.png" alt="rightview"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><p>血淋林的教训告诉我们没事别定义空数据段，然后把它晾在那，不然出现的问题会让人很意外！！！</p><p>以上便是本次编程经历的全部发现，如有问题或者类似的发现可一起交流探讨。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前使用&lt;code&gt;Dosbox&lt;/code&gt;环境编写汇编程序遇到的一个问题，经过摸索已基本搞清楚原因。&lt;/p&gt;
    
    </summary>
    
      <category term="汇编编程" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/%E6%B1%87%E7%BC%96%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="汇编" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>8086 通用寄存器的专用功能</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2016/Register_of_8086/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2016/Register_of_8086/</id>
    <published>2016-11-09T02:31:14.000Z</published>
    <updated>2018-09-09T13:29:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>根据汇编学习经历和编程经验总结一下8086系统通用寄存器的专用功能。</p><a id="more"></a><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><hr><p>8086 系统中有 8 个通用寄存器。虽然叫作通用寄存器，但它们却都有自己专门的名字，这是因为它们都有自己专门的功能。比如 CX 作为计数寄存器，用来存储循环次数。如果只有一个专用功能，那就它们只能称之为专用寄存器了，而这些寄存器还可以用来传送数据和暂存数据，所以称它们为通用寄存器。</p><h2 id="数据寄存器"><a href="#数据寄存器" class="headerlink" title="数据寄存器"></a>数据寄存器</h2><hr><p>数据寄存器主要用来保存操作数和运算结果等信息，它们的存在节省了为存取操作数所需占用总线和访问存储器的时间。这四个 16 位的数据寄存器均可分解成两个独立的 8 位寄存器，这些 8 位的寄存器有各自的名称，均可独立存取。<br>例如：AX寄存器可以分解为AH寄存器和 AL 寄存器，其中 AH 寄存器就是 AX 寄存器的高 8 位，AL 寄存器就是AX寄存器的低 8 位。其他寄存器类似。</p><h3 id="累积器"><a href="#累积器" class="headerlink" title="累积器"></a>累积器</h3><p><strong>AX</strong>:<br>i. 在字乘、字除指令中做累加器，存储被除数/商以及因数/积；<br>ii. 在字I/O操作时用做数据寄存器与外界设备传送数据；</p><p><strong>AH, AL</strong>:<br>i. 在LAHF指令中用做目的寄存器；<br>ii. 在字节乘、字节除指令中用做累加器，存储；<br>iii. 在字节I/O操作时做数据寄存器与外界设备传送数据；<br>iv. BCD、ASCII码数据运算时用作累加器，在XLAT指令中用作累加器。</p><p><strong>除法运算</strong><br>运算开始时：<br>如果除数是 8  位，被除数一定是 16 位的，被除数默认放在 AX 寄存器中；<br>如果除数是 16 位，被除数一定是 32 位的，这时要引入 DX，其中 DX 放被除数的高 16 位，AX 则放被除数的低 16 位。<br>运算结束时：<br>如果除数是 8  位，则 AL 中保存此次除法操作的商，而在 AH 中保存此次除法操作的余数；<br>如果除数是 16 位，则 AX 中保存此次除法操作的商，而在 DX 中保存此次除法操作的余数。</p><p><strong>乘法运算</strong><br>运算开始时：(两个相乘的数要么都是 8 位，要么都是 16 位)<br>如果两个相乘的数都是 8  位，则一个默认放在 AL 中，另一个放在 8  位寄存器中或者内存<strong>字节</strong>单元中；<br>如果两个相乘的数都是 16 位，则一个默认放在 AX 中，另一个放在 16 位寄存器中或者内存<strong>字  </strong>单元中。<br>运算结束时：<br>如果是 8  位的乘法运算，则默认乘法运算的结果是保存在 AX 中；<br>如果是 16 位的乘法运算，则默认乘法运算的结果有 32 位，这时要引入 DX，其中高位默认保存在 DX 中，而低位则默认保存在 AX 中。</p><h3 id="基址寄存器"><a href="#基址寄存器" class="headerlink" title="基址寄存器"></a>基址寄存器</h3><p><strong>BX</strong>:<br>i. 间接寻址时用作地址寄存器和基址寄存器；<br>ii. 在XLAT指令中用作基址寄存器。<br><strong>注</strong>：<br>它是四个数据存储器中唯一可以作为存储器指针使用的存储器</p><h3 id="计数寄存器"><a href="#计数寄存器" class="headerlink" title="计数寄存器"></a>计数寄存器</h3><p><strong>CX</strong>:<br>i. 字符串操作时用作循环次数计数器；<br>ii. 循环操作时用作循环次数计数器。</p><p><strong>CL</strong>:<br>在循环移位和移位操作时用作环移和移位次数的计数寄存器</p><p>CPU 在每次执行 LOOP 指令的时候，会完成两个过程：<br>i. CX = CX – 1，即令 CX 计数器自动减去 1；<br>ii. 判断 CX 中的值，如果 CX 中的值为 0 则会跳出循环，去执行循环后面的指令；如果 CX 中的值不为 0 ，则继续执行循环中所指定的指令。</p><h3 id="数据寄存器-1"><a href="#数据寄存器-1" class="headerlink" title="数据寄存器"></a>数据寄存器</h3><p><strong>DX</strong>:<br>i. 在字乘、字除指令中用做辅助寄存器，具体使用见 AX 部分；<br>ii. I/O指令间接寻址时用作端口寄存器，存放I/O端口地址。</p><h2 id="指针寄存器"><a href="#指针寄存器" class="headerlink" title="指针寄存器"></a>指针寄存器</h2><hr><p>这两个 16 位寄存器只能按 16 位进行存取操作，主要用来形成操作数的地址，用于堆栈操作中计算操作数的有效地址。</p><h3 id="堆栈指针寄存器"><a href="#堆栈指针寄存器" class="headerlink" title="堆栈指针寄存器"></a>堆栈指针寄存器</h3><p><strong>SP</strong>:<br>堆栈指针，必须与SS配合使用，指向目前的堆栈位置，在任何时刻，SS:SP 都是指向栈顶元素。</p><h3 id="基址指针寄存器"><a href="#基址指针寄存器" class="headerlink" title="基址指针寄存器"></a>基址指针寄存器</h3><p><strong>BP</strong>:<br>i. 间接寻址时用作地址寄存器和变址寄存器；<br>ii. 用作 SS 的一个相对基址位置，用于给出堆栈中数据区基址的偏移，从而可以方便的实现直接存取堆栈中的数据。</p><p>如果指令中明确给出段地址，例如 DS:[BP]，那么它代表的内存单元是段地址为 DS，偏移量为 BP 寄存器中的值的内存单元；而如果指令中没有明确段地址，只使用 [BP] 时，那么它代表的内存单元是段地址为 SS，偏移量为 BP 寄存器中的值的内存单元。（BX，SI，DI 会默认使用 DS 段寄存器）</p><h2 id="变址寄存器"><a href="#变址寄存器" class="headerlink" title="变址寄存器"></a>变址寄存器</h2><hr><p>这两个16位寄存器只能按16位进行存取操作，主要用来形成操作数的地址，用于变址运算中计算操作数的有效地址。</p><h3 id="源地址寄存器"><a href="#源地址寄存器" class="headerlink" title="源地址寄存器"></a>源地址寄存器</h3><p><strong>SI</strong>:<br>i. 间接寻址时用作地址寄存器和变址寄存器；<br>ii. 串操作时时用作<strong>源</strong>变址寄存器，用来存放相对于 DS 段的<strong>源变址指针</strong>。</p><h3 id="目的地址寄存器"><a href="#目的地址寄存器" class="headerlink" title="目的地址寄存器"></a>目的地址寄存器</h3><p><strong>DI</strong>:<br>i. 间接寻址时用作地址寄存器和变址寄存器；<br>ii. 串操作时时用作<strong>目的</strong>变址寄存器，用来存放相对于 ES 段的<strong>目的变址指针</strong>。</p><p><strong>再次强调</strong>：<br>以上四个16位寄存器只能按16位进行存取操作，主要用来形成操作数的地址，用于堆栈操作和变址运算中计算操作数的有效地址。</p><h2 id="最后补充"><a href="#最后补充" class="headerlink" title="最后补充"></a>最后补充</h2><hr><p>除上述的专用功能外，在中断系统中相应功能的实现也会指定专用的寄存器，由于中断类型太多不一一列举，详情可以在网上搜索<strong>BIOS、DOS中断大全</strong>便可找到所有的功能实现。</p><p><img src="https://floretten-1252347631.costj.myqcloud.com/Assembly/int21h.png" alt="INT21H"></p><p>完整 INT21H 功能可参考 <a href="http://wenku.baidu.com/link?url=SIa3cwuKcvxXclwPsgohSyBEKJQn3nRL3msqEo8_vu3ZxubIhBXeqYFqASuGcHmcf_Ca_Ami4_4Lm6eR0Ie0blJHuo0U644a7y-GldyHn9C" rel="external nofollow noopener noreferrer" target="_blank">百度文库</a> 或者自行搜索</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据汇编学习经历和编程经验总结一下8086系统通用寄存器的专用功能。&lt;/p&gt;
    
    </summary>
    
      <category term="汇编编程" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/%E6%B1%87%E7%BC%96%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="汇编" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言实现进制转换</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2016/Conversion/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2016/Conversion/</id>
    <published>2016-11-05T05:30:35.000Z</published>
    <updated>2018-09-09T13:28:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>8086 汇编是一种经典的底层语言，本文将结合代码简单介绍使用汇编语言来实现子程序的设计，以十六进制显示输出寄存器中二进制内容。</p><a id="more"></a><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>编制一个过程把AL寄存器内的二进制数用十六进制的形式在屏幕上显示出来。</p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>我们知道计算机里存储的是二进制，但显示的时候是通过转换成ASCII码显示出来的，所以我们要做的就是把这些二进制数每四位一组转换成对应数字的ASCII码值并将其赋值给DL，调用21H中断将其显示输出即可。具体的转换过程可以参考代码注释部分。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">DATA<span class="meta">SEGMENT</span></span><br><span class="line">        COUNT  <span class="built_in">EQU</span>  <span class="number">5</span></span><br><span class="line">        ARRAY  <span class="built_in">DB</span>  <span class="number">12H</span>, <span class="number">34H</span>, <span class="number">24H</span>, <span class="number">86H</span>, <span class="number">47H</span></span><br><span class="line">DATAENDS</span><br><span class="line">CODE<span class="meta">SEGMENT</span></span><br><span class="line">        <span class="meta">ASSUME</span> <span class="built_in">CS</span>:CODE</span><br><span class="line"><span class="symbol">START:</span></span><br><span class="line">        <span class="keyword">MOV</span>  <span class="built_in">AX</span>, DATA</span><br><span class="line">        <span class="keyword">MOV</span>  <span class="built_in">DS</span>, <span class="built_in">AX</span></span><br><span class="line">        <span class="keyword">MOV</span>  <span class="built_in">BX</span>, OFFSET ARRAY</span><br><span class="line">        <span class="keyword">MOV</span>  <span class="built_in">CX</span>, COUNT</span><br><span class="line"><span class="symbol">DISPLP:</span></span><br><span class="line">        <span class="keyword">MOV</span>  <span class="built_in">AL</span>, [<span class="built_in">BX</span>]</span><br><span class="line">        <span class="keyword">CALL</span> ALDISP</span><br><span class="line">        <span class="keyword">MOV</span>  <span class="built_in">AL</span>, <span class="string">','</span><span class="comment">;逗号分隔，不过输出结果很让人意外</span></span><br><span class="line">        <span class="keyword">MOV</span>  <span class="number">AH</span>, <span class="number">02H</span></span><br><span class="line">        <span class="keyword">INT</span>  <span class="number">21H</span></span><br><span class="line">        <span class="keyword">INC</span>  <span class="built_in">BX</span></span><br><span class="line">        <span class="keyword">LOOP</span> DISPLP</span><br><span class="line"><span class="symbol">EXIT:</span></span><br><span class="line">        <span class="keyword">MOV</span>  <span class="number">AH</span>, <span class="number">4CH</span></span><br><span class="line">        <span class="keyword">INT</span>  <span class="number">21H</span></span><br><span class="line"></span><br><span class="line">ALDISPPROC<span class="comment">;实现AL内容的显示</span></span><br><span class="line">        <span class="keyword">PUSH</span> <span class="built_in">AX</span></span><br><span class="line">        <span class="keyword">PUSH</span> <span class="built_in">CX</span></span><br><span class="line">        <span class="keyword">PUSH</span> <span class="built_in">DX</span><span class="comment">;子程序使用到的寄存器压栈以保护</span></span><br><span class="line">        <span class="keyword">PUSH</span> <span class="built_in">AX</span><span class="comment">;暂存AX，稍后转换低四位</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">MOV</span>  <span class="built_in">DL</span>, <span class="built_in">AL</span> <span class="comment">;转换AL高四位</span></span><br><span class="line">        <span class="keyword">MOV</span>  <span class="built_in">CL</span>, <span class="number">4</span><span class="comment">;(CL)=4(0000HHHH)</span></span><br><span class="line">        <span class="keyword">SHR</span>  <span class="built_in">DL</span>, <span class="built_in">CL</span><span class="comment">;(0-9)(30H-39H)(A-F)(41H-46H)</span></span><br><span class="line">        <span class="keyword">OR</span>   <span class="built_in">DL</span>, <span class="number">30H</span><span class="comment">;(0000HHHH)(00110000)高四位变成3</span></span><br><span class="line">        <span class="keyword">CMP</span>  <span class="built_in">DL</span>, <span class="number">39H</span></span><br><span class="line">        <span class="keyword">JBE</span>  ALDISP1<span class="comment">;显示数字(0-9)</span></span><br><span class="line">        <span class="keyword">ADD</span>  <span class="built_in">DL</span>, <span class="number">7</span><span class="comment">;显示数字(A-F)</span></span><br><span class="line"><span class="symbol">ALDISP1:</span></span><br><span class="line">        <span class="keyword">MOV</span>  <span class="number">AH</span>, <span class="number">02H</span></span><br><span class="line">        <span class="keyword">INT</span>  <span class="number">21H</span></span><br><span class="line">        <span class="keyword">POP</span>  <span class="built_in">DX</span><span class="comment">;恢复AX保存到DX</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">AND</span>  <span class="built_in">DL</span>, <span class="number">0FH</span><span class="comment">;转换AL低四位(HHHHLLLL)(00001111)</span></span><br><span class="line">        <span class="keyword">OR</span>   <span class="built_in">DL</span>, <span class="number">30H</span><span class="comment">;(0000LLLL)(00110000)高四位变成3</span></span><br><span class="line">        <span class="keyword">CMP</span>  <span class="built_in">DL</span>, <span class="number">39H</span></span><br><span class="line">        <span class="keyword">JBE</span>  ALDISP2</span><br><span class="line">        <span class="keyword">ADD</span>  <span class="built_in">DL</span>, <span class="number">7</span></span><br><span class="line"><span class="symbol">ALDISP2:</span></span><br><span class="line">        <span class="keyword">MOV</span>  <span class="number">AH</span>, <span class="number">02H</span></span><br><span class="line">        <span class="keyword">INT</span>  <span class="number">21H</span></span><br><span class="line">        <span class="keyword">POP</span>  <span class="built_in">DX</span></span><br><span class="line">        <span class="keyword">POP</span>  <span class="built_in">CX</span></span><br><span class="line">        <span class="keyword">POP</span>  <span class="built_in">AX</span></span><br><span class="line">        <span class="keyword">RET</span></span><br><span class="line">ALDISPENDP</span><br><span class="line"></span><br><span class="line">CODEENDS</span><br><span class="line">        END START</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://floretten-1252347631.costj.myqcloud.com/Assembly/exchange.png" alt="result"></p><p><strong>说明</strong>：代码中本来想用逗号分割的，结果输出的不知道是什么鬼，不过不影响功能的实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;8086 汇编是一种经典的底层语言，本文将结合代码简单介绍使用汇编语言来实现子程序的设计，以十六进制显示输出寄存器中二进制内容。&lt;/p&gt;
    
    </summary>
    
      <category term="汇编编程" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/%E6%B1%87%E7%BC%96%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="汇编" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言实现冒泡排序</title>
    <link href="https://evandoz.github.io/hexo-theme-astrid/2016/BubbleSort_x86Assembly/"/>
    <id>https://evandoz.github.io/hexo-theme-astrid/2016/BubbleSort_x86Assembly/</id>
    <published>2016-10-28T07:30:10.000Z</published>
    <updated>2018-09-09T13:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>8086 汇编是一种经典的底层语言，本文将结合代码介绍使用汇编语言来实现冒泡排序。</p><a id="more"></a><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><hr><p>数据区存放一组数据，要求采用冒泡法对数据区的数据按递增排序，并且从最后一位开始向前比较，排序完成后把数据按排序后的递增顺序放回。</p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><hr><p>冒泡排序在高级语言中同时要使用双重循环，这里也不例外。因此一层一层的来。</p><p>先实现<strong>内层循环</strong>，即一个一个相邻的数进行比较，该调换顺序的调换顺序，不用调换的直接进行下一位比较，具体看代码中<strong>SORT..LOOP</strong>部分。</p><p>再实现<strong>外层循环</strong>，根据冒泡排序，每进行一次内层循环，就会有一个最小的数到达它该到达的位置，这样一来下一趟排序循环的次数就减一，于是在外层循环中我们就控制内层循环的次数<strong>(CX)</strong>，内层循环进行一次退出后，在外层循环将循环次数减一<strong>(DEC CX)</strong>再让其进入循环，直到循环次数为 0 <strong>(CMP CX, 0)</strong>退出。另外还有一个要保存的是每次循环开始的位置<strong>(PUSH SI)</strong>。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><hr><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">DATA <span class="meta">SEGMENT</span></span><br><span class="line">        ORG<span class="number">3000H</span></span><br><span class="line">        COUNT <span class="built_in">EQU</span> <span class="number">6</span></span><br><span class="line">        <span class="keyword">STR</span> <span class="built_in">DB</span> <span class="number">12H</span>, <span class="number">78H</span>, <span class="number">62H</span>, <span class="number">50H</span>, <span class="number">22H</span>, <span class="number">33H</span></span><br><span class="line">DATAENDS</span><br><span class="line">CODE<span class="meta">SEGMENT</span></span><br><span class="line">        <span class="meta">ASSUME</span> <span class="built_in">DS</span>:DATA, <span class="built_in">CS</span>:CODE</span><br><span class="line"><span class="symbol">START:</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">AX</span>, DATA</span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">DS</span>, <span class="built_in">AX</span><span class="comment">;装载段地址</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">SI</span>, OFFSET <span class="keyword">STR</span><span class="comment">;偏移地址</span></span><br><span class="line">        <span class="keyword">ADD</span> <span class="built_in">SI</span>, COUNT</span><br><span class="line">        <span class="keyword">DEC</span> <span class="built_in">SI</span><span class="comment">;跳到最后一个位置，这里是实验题目要求，不要奇怪博主为何从后往前比较</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">CX</span>, COUNT</span><br><span class="line"></span><br><span class="line"><span class="symbol">W:</span><span class="comment">;外层循环开始</span></span><br><span class="line">        <span class="keyword">PUSH</span> <span class="built_in">CX</span><span class="comment">;保存一趟排序要比较的次数，即循环次数，下一趟排序时减一</span></span><br><span class="line">        <span class="keyword">PUSH</span> <span class="built_in">SI</span><span class="comment">;保存一趟排序开始的位置，需要保持不变</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">SORT:</span><span class="comment">;内层循环开始，一趟排序开始</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="built_in">BL</span>, [<span class="built_in">SI</span>]</span><br><span class="line">        <span class="keyword">CMP</span> <span class="built_in">BL</span>, [<span class="built_in">SI</span>-<span class="number">1</span>] <span class="comment">;当前位置与其下一个位置比较</span></span><br><span class="line">        <span class="keyword">JB</span>  A</span><br><span class="line">        <span class="keyword">JMP</span> B</span><br><span class="line"></span><br><span class="line"><span class="symbol">A:</span></span><br><span class="line">        <span class="keyword">XCHG</span> <span class="built_in">BL</span>, [<span class="built_in">SI</span>-<span class="number">1</span>] <span class="comment">;当前位置比下一位小，交换</span></span><br><span class="line">        <span class="keyword">MOV</span>  [<span class="built_in">SI</span>], <span class="built_in">BL</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">B:</span></span><br><span class="line">        <span class="keyword">DEC</span>  <span class="built_in">SI</span></span><br><span class="line">        <span class="keyword">LOOP</span> SORT<span class="comment">;内层循环结束，一趟排序结束</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">POP</span> <span class="built_in">SI</span><span class="comment">;恢复排序开始位置</span></span><br><span class="line">        <span class="keyword">POP</span> <span class="built_in">CX</span></span><br><span class="line">        <span class="keyword">DEC</span> <span class="built_in">CX</span><span class="comment">;下一趟循环，比较次数减一</span></span><br><span class="line">        <span class="keyword">CMP</span> <span class="built_in">CX</span>, <span class="number">0</span><span class="comment">;CX大于0，说明还需要继续冒泡</span></span><br><span class="line">        <span class="keyword">JA</span>  W</span><br><span class="line">        <span class="keyword">JMP</span> EXIT<span class="comment">;外层循环结束</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">EXIT:</span></span><br><span class="line">        <span class="keyword">MOV</span> <span class="number">AH</span>, <span class="number">4CH</span></span><br><span class="line">        <span class="keyword">INT</span> <span class="number">21H</span><span class="comment">;返回系统</span></span><br><span class="line"></span><br><span class="line">CODEENDS</span><br><span class="line">        END START</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;8086 汇编是一种经典的底层语言，本文将结合代码介绍使用汇编语言来实现冒泡排序。&lt;/p&gt;
    
    </summary>
    
      <category term="汇编编程" scheme="https://evandoz.github.io/hexo-theme-astrid/categories/%E6%B1%87%E7%BC%96%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="汇编" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="冒泡排序" scheme="https://evandoz.github.io/hexo-theme-astrid/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
